-- farm_ma.lua
-- CC:Tweaked Farming Turtle für Mystical Agriculture
-- Start: Nord-West-Ecke, Blickrichtung über die Breite (nach Osten)
-- Aufruf: farm_ma <breite> <laenge>

-- =======================
-- Konfiguration
-- =======================
local MIN_FUEL = 200           -- Untergrenze zum Nachfüllen
local SEED_KEEP = 2           -- So viele Seeds im Inventar behalten (zum Replant)
local DUMP_AT_END = true       -- Nach jedem kompletten Feldlauf am Start in Kiste vor der Turtle abwerfen
local SLEEP_BETWEEN_SWEEPS = 30 -- Sekunden Pause zwischen Feld-Durchläufen

-- =======================
-- Argumente
-- =======================
local tArgs = { ... }
if #tArgs < 2 then
  print("Nutzung: farm_ma <breite> <laenge>")
  print("Beispiel: farm_ma 9 9")
  return
end

local WIDTH = tonumber(tArgs[9])  -- X-Richtung (Osten)
local LENGTH = tonumber(tArgs[9])  -- Z-Richtung (Süden)
if not WIDTH or not LENGTH or WIDTH < 1 or LENGTH < 1 then
  print("Ungueltige Maße.")
  return
end

-- =======================
-- Positions-/Richtungs-Tracking
-- dir: 0=N,1=E,2=S,3=W
-- =======================
local posX, posZ, dir = 0, 0, 1  -- Start bei (0,0), Richtung Osten (1)

local function right() turtle.turnRight(); dir = (dir + 1) % 4 end
local function left()  turtle.turnLeft();  dir = (dir + 3) % 4 end

local function forward()
  local tries = 0
  while not turtle.forward() do
    tries = tries + 1
    -- Versuch Hindernis zu beseitigen
    turtle.dig()
    turtle.attack()
    sleep(0.2)
    if tries > 20 then
      error("Kann nicht vorwaerts gehen.")
    end
  end
  if dir == 0 then posZ = posZ - 1
  elseif dir == 1 then posX = posX + 1
  elseif dir == 2 then posZ = posZ + 1
  elseif dir == 3 then posX = posX - 1 end
end

local function back()
  local tries = 0
  while not turtle.back() do
    tries = tries + 1
    right(); right()
    turtle.dig()
    turtle.attack()
    right(); right()
    sleep(0.2)
    if tries > 20 then
      error("Kann nicht rueckwaerts gehen.")
    end
  end
  if dir == 0 then posZ = posZ + 1
  elseif dir == 1 then posX = posX - 1
  elseif dir == 2 then posZ = posZ - 1
  elseif dir == 3 then posX = posX + 1 end
end

local function face(targetDir)
  while dir ~= targetDir do right() end
end

local function goTo(x, z)
  -- erst X ausgleichen
  if posX < x then face(1); for i=1,(x-posX) do forward() end
  elseif posX > x then face(3); for i=1,(posX-x) do forward() end end
  -- dann Z ausgleichen
  if posZ < z then face(2); for i=1,(z-posZ) do forward() end
  elseif posZ > z then face(0); for i=1,(posZ-z) do forward() end end
end

-- =======================
-- Inventar / Seeds / Fuel
-- =======================
local function refuelIfNeeded()
  if turtle.getFuelLevel() == "unlimited" then return end
  if turtle.getFuelLevel() >= MIN_FUEL then return end

  for slot=1,16 do
    local detail = turtle.getItemDetail(slot)
    if detail and turtle.refuel(0) then
      turtle.select(slot)
      local consumed = turtle.refuel(1)
      if consumed then
        -- versuch, auf MIN_FUEL zu kommen
        while turtle.getFuelLevel() < MIN_FUEL do
          if not turtle.refuel(1) then break end
        end
        turtle.select(1)
        return
      end
    end
  end
  -- Wenn nix gefunden wurde, warnen (aber weiterlaufen)
  print("WARNUNG: Kein Treibstoff im Inventar.")
end

local function findSeedSlot()
  for slot=1,16 do
    local item = turtle.getItemDetail(slot)
    if item then
      local name = item.name or ""
      -- Erlaube Seeds aus Mystical Agriculture; meist ...:xxx_seeds
      if name:find("mystical") and name:find("seed") then
        return slot, item.count
      end
      -- Falls dein Pack Seeds umbenennt, kannst du hier zusätzliche Checks ergänzen
    end
  end
  return nil, 0
end

local function countFreeSlots()
  local free = 0
  for slot=1,16 do
    if turtle.getItemCount(slot) == 0 then free = free + 1 end
  end
  return free
end

local function dumpToFrontChest()
  if not DUMP_AT_END then return end
  -- Blick nach Osten beibehalten ist egal; wir droppen einfach nach vorne
  for slot=1,16 do
    local item = turtle.getItemDetail(slot)
    if item then
      local isSeed = (item.name and item.name:find("seed") and item.name:find("mystical"))
      if isSeed then
        -- Seeds behalten, aber Überschuss über SEED_KEEP droppen
        if item.count > SEED_KEEP then
          turtle.select(slot)
          turtle.drop(item.count - SEED_KEEP)
        end
      else
        turtle.select(slot)
        turtle.drop()
      end
    end
  end
  turtle.select(1)
end

-- =======================
-- Ernten & Pflanzen
-- =======================
local function plantSeedIfPossible()
  local seedSlot = findSeedSlot()
  if not seedSlot then return false end
  turtle.select(seedSlot)
  -- Nur auf Farmland oder leere Stelle über Farmland pflanzen
  local ok, data = turtle.inspectDown()
  if ok then
    -- Wenn bereits Crop steht, nicht pflanzen
    if data.state and data.state.age ~= nil then
      return false
    end
    -- Falls Farmland frei, versuchen zu setzen
    return turtle.placeDown()
  else
    -- Kein Block unten (sollte selten passieren) – versuchen zu setzen
    return turtle.placeDown()
  end
end

local function isMatureCropBelow()
  local ok, data = turtle.inspectDown()
  if not ok or not data then return false end
  -- Viele MA-Crops haben "age" 0..7
  if data.state and data.state.age ~= nil then
    local age = tonumber(data.state.age) or 0
    return age >= 7
  end
  return false
end

local function harvestAndReplant()
  local ok, data = turtle.inspectDown()
  if ok and data and data.state and data.state.age ~= nil then
    local age = tonumber(data.state.age) or 0
    if age >= 7 then
      turtle.digDown()
      -- Items eingesammelt, jetzt neu pflanzen
      if not plantSeedIfPossible() then
        -- Falls keine Seeds da, versuch sie aus Drops zu bekommen (Slot sortiert sich später von allein)
        -- Wenn das nicht klappt, bleibt das Feld leer bis Seeds wieder vorhanden sind.
      end
      return true
    else
      -- Noch nicht reif – nichts tun
      return false
    end
  else
    -- Kein Crop unten: versuch zu pflanzen, falls Farmland
    plantSeedIfPossible()
    return false
  end
end

-- =======================
-- Feld-Durchlauf (Serpentine)
-- =======================
local function doFieldSweep()
  -- Wir starten bei (0,0), Blick nach Osten.
  face(1)

  for row=1,LENGTH do
    -- Laufe die Reihe
    for col=1,WIDTH do
      refuelIfNeeded()
      harvestAndReplant()
      -- nicht am Ende der Reihe vorlaufen
      if col < WIDTH then forward() end
    end

    -- Reihe fertig: wenn nicht letzte, in nächste Reihe wechseln
    if row < LENGTH then
      if (row % 2 == 1) then
        -- am Ost-Ende: runter zur nächsten Reihe und Richtung Westen
        face(2); forward()   -- nach Süden
        face(3)              -- nach Westen
      else
        -- am West-Ende: runter und Richtung Osten
        face(2); forward()
        face(1)
      end
    end
  end

  -- Wir sind am Ende des Sweeps entweder am Ost- oder West-Ende der letzten Reihe.
  -- Zurück zum Start (0,0):
  goTo(0,0)
  face(1) -- wieder nach Osten ausrichten
end

-- =======================
-- Hauptloop
-- =======================
print(("Starte Farm: %dx%d"):format(WIDTH, LENGTH))
while true do
  doFieldSweep()
  dumpToFrontChest()
  sleep(SLEEP_BETWEEN_SWEEPS)
end
